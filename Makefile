GO_SOURCES = $(wildcard *.go)

goas: $(GO_SOURCES)
	go build -o goas .

.PHONY: test
# Check /etc/os-release to prevent non-linux from running this
test:  /etc/os-release test1 test4 test5

T1_SOURCES = $(wildcard t1/*.s)
T1_GNU_OBJS = $(T1_SOURCES:t1/%.s=out1/%.gnu.o)
T1_MY_OBJS = $(T1_SOURCES:t1/%.s=out1/%.my.o)

out1:
	mkdir -p $@

# Test single-source program
.PHONY: test1
test1: $(T1_GNU_OBJS) $(T1_MY_OBJS)
	./tool/compare-obj out1
	@echo ok

out1/%.gnu.o: t1/%.s out1
	as -o $@ $<

out1/%.my.o: t1/%.s goas out1
	./goas -o $@ $<


T4_SOURCES = $(wildcard t4/*.s)
T4_GNU_OBJS = $(T4_SOURCES:t4/%.s=out4/%.gnu.o)
T4_MY_OBJS = $(T4_SOURCES:t4/%.s=out4/%.my.o)

# Test asm files generated by babygo's test
test4: $(T4_GNU_OBJS) $(T4_MY_OBJS)
	./tool/compare-obj out4
	@echo ok

out4:
	mkdir -p $@

out4/%.gnu.o: t4/%.s out4
	as -o $@ $<

out4/%.my.o: t4/%.s goas out4
	./goas -o $@ $<

# Make and run babygo
run-babygo-test: out4/babygo-test out4/t/text.txt
	cd out4 ; ./babygo-test

out4/t/text.txt:  out4 t2/t/text.txt
	cp -ar t2/t out4/

out4/babygo-test: out4/*.my.o
	ld -o $@ $^

T5_SOURCES = $(wildcard t5/*.s)
T5_GNU_OBJS = $(T5_SOURCES:t5/%.s=out5/%.gnu.o)
T5_MY_OBJS = $(T5_SOURCES:t5/%.s=out5/%.my.o)

# Test asm files generated by babygo's test
test5: $(T5_GNU_OBJS) $(T5_MY_OBJS)
	./tool/compare-obj out5
	@echo ok

out5:
	mkdir -p $@

out5/%.gnu.o: t5/%.s out5
	as -o $@ $<

out5/%.my.o: t5/%.s goas out5
	./goas -o $@ $<

# Make and run babygo 2gen
run-babygo: out5/babygo
	cd out5 ; ./babygo version

out5/babygo: out5/*.my.o
	ld -o $@ $^

clean:
	rm -rf goas *.o *.bin *.out out1 out4 out5 ./babygo
