GO_SOURCES = $(wildcard *.go)

goas: $(GO_SOURCES)
	go build -o goas .

.PHONY: test
# Check /etc/os-release to prevent non-linux from running this
test: test1 test4 test5

T1_SOURCES = $(wildcard t1/*.s)
T1_GNU_OBJS = $(T1_SOURCES:t1/%.s=out/g/1/%.o)
T1_MY_OBJS = $(T1_SOURCES:t1/%.s=out/m/1/%.o)

# dir to save GNU output
out/g/1:
	mkdir -p $@

# dir to save my output
out/m/1:
	mkdir -p $@

# Test single-source program
.PHONY: test1
test1: $(T1_GNU_OBJS) $(T1_MY_OBJS)
	./tool/check-diff 1
	@echo ok

out/g/1/%.o: t1/%.s out/g/1 /etc/os-release
	as -o $@ $<

out/m/1/%.o: t1/%.s goas out/m/1
	./goas -o $@ $<


T4_SOURCES = $(wildcard t4/*.s)
T4_GNU_OBJS = $(T4_SOURCES:t4/%.s=out/g/4/%.o)
T4_MY_OBJS = $(T4_SOURCES:t4/%.s=out/m/4/%.o)

out/g/4:
	mkdir -p $@

out/m/4:
	mkdir -p $@

# Test asm files generated by babygo's test
.PHONY: test4
test4: $(T4_GNU_OBJS) $(T4_MY_OBJS)
	./tool/check-diff 4
	@echo ok

out/g/4/%.o: t4/%.s out/g/4 /etc/os-release
	as -o $@ $<

out/m/4/%.o: t4/%.s goas out/m/4
	./goas -o $@ $<

# Make and run babygo test
run-babygo-test: out/m/4/babygo-test out/m/4/t/text.txt
	cd out/m/4 ; ./babygo-test

out/m/4/t/text.txt:  out/m/4 t4/t/text.txt
	cp -ar t4/t out/m/4/

out/m/4/babygo-test: out/m/4/*.o
	ld -o $@ $^

T5_SOURCES = $(wildcard t5/*.s)
T5_GNU_OBJS = $(T5_SOURCES:t5/%.s=out/g/5/%.o)
T5_MY_OBJS = $(T5_SOURCES:t5/%.s=out/m/5/%.o)

# Test asm files generated by babygo's test
test5: $(T5_GNU_OBJS) $(T5_MY_OBJS)
	./tool/check-diff 5
	@echo ok

out/m/5:
	mkdir -p $@

out/g/5:
	mkdir -p $@

out/g/5/%.o: t5/%.s out/g/5 /etc/os-release
	as -o $@ $<

out/m/5/%.o: t5/%.s goas out/m/5
	./goas -o $@ $<

# Make and run babygo 2gen
run-babygo: out/m/5/babygo
	cd out/m/5 ; ./babygo version

out/m/5/babygo: out/m/5/*.o
	ld -o $@ $^

clean:
	rm -rf goas *.o *.bin *.out out
